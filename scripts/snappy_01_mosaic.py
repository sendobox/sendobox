########################################################################################################################
#
#   Toolbox for batch downloading and preprocessing of Sentinel satellite data from Sentinels Scientific Data Hub
#   Contributors: Thomas Stark & Tatjana Buergmann (TU Munich)
#   Adaption of Adreas Baumann http://forum.step.esa.int/users/abgbaumann/activity
#   Date: March 29, 2017
#
########################################################################################################################

## IMPORT LIB
import sys

import snappy

# The ProductIO class provides several utility methods concerning data I/O for remote sensing data products.
from snappy import ProductIO

# SNAP's Graph Processing Framework GPF used for developing and executing raster data operators and graphs of such operators.                                         
from snappy import GPF                  

# Java - Python bridge                                        
from snappy import jpy    

# Basic functions
#from snappy_basic import basicOp
from snappy_01_basic import basicOp
'''
----------------------------------------------------------------------------------------------------------------------------------------
Class mosaicOp
----------------------------------------------------------------------------------------------------------------------------------------
'''

class mosaicOp(object):
    
    def __init__(self):
        # HashMap
        #           Key-Value pairs.
        #           https://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html
        self.HashMap = jpy.get_type('java.util.HashMap')
        
        # Get snappy Operators
        GPF.getDefaultInstance().getOperatorSpiRegistry().loadOperatorSpis() 
        
        # Variables
        #           Describes a target band to be generated by this operator.       
        #           http://step.esa.int/docs/v2.0/apidoc/engine/org/esa/snap/core/gpf/common/BandMathsOp.BandDescriptor.html
        self.Variables = jpy.get_type('org.esa.snap.core.gpf.common.MosaicOp$Variable')
        
    def mosaic(self, src_data, trg_file_path, band_dict, para_dict, trg_file_format='GeoTIFF'):
        '''
        --------------------------------------------------------------------------------------------------------------------------------
        Function: Creates a mosaic out of a set of source products.
        --------------------------------------------------------------------------------------------------------------------------------
        Parameter: - src_data:      An object ('Product') of the S2-dataset
                   - trg_file_path: A string containing the path to the output S-2 dataset and it's name.
                   - para_dict:                                                                          
                                    - combine=<string>               Specifies the way how conditions are combined.
                                                                     Value must be one of 'OR', 'AND'.
                                                                     DEFAULT value is 'OR'.
                                                                     
                                    - crs=<string>                   The CRS of the target product, represented as WKT or authority code.
                                                                     DEFAULT value is 'EPSG:4326'.
                                                                     
                                    - northBound=<double>            The northern latitude.
                                                                     Valid interval is [-90,90].
                                                                     DEFAULT value is '75.0'. 
                                                                     
                                    - eastBound=<double>             The eastern longitude.
                                                                     Valid interval is [-180,180].
                                                                     DEFAULT value is '30.0'.
                                                                     
                                    - southBound=<double>            The southern latitude.
                                                                     Valid interval is [-90,90].
                                                                     DEFAULT value is '35.0'.
                                                                     
                                    - westBound=<double>             The western longitude.
                                                                     Valid interval is [-180,180].
                                                                     DEFAULT value is '-15.0'.                                 
                                                                     
                                    - elevationModelName=<string>    The name of the elevation model for the orthorectification.
 
                                    - orthorectify=<boolean>         Whether the source product should be orthorectified.
                                                                     DEFAULT value is 'false'.
                                                                     
                                    - pixelSizeX=<double>            Size of a pixel in X-direction in map units.
                                                                     DEFAULT value is '0.05'.
                                                                     
                                    - pixelSizeY=<double>            Size of a pixel in Y-direction in map units.
                                                                     DEFAULT value is '0.05'.
                                                                     
                                    - resampling=<string>            The method used for resampling.
                                                                     Value must be one of 'Nearest', 'Bilinear', 'Bicubic'.
                                                                     DEFAULT value is 'Nearest'.
                                                
                   - trg_file_format: A string containing the Export Format Name. e.g. 'BEAM-DIMAP', 'GeoTIFF', 'NetCDF'
                                                                     DEFAULT value is 'BEAM-DIMAP'
        --------------------------------------------------------------------------------------------------------------------------------
        How to run this code:
        
        from snappy import ProductIO
        from snappy_mosaic import mosaicOp
        
        src_path_1 = 'C:/S2/S2A_USER_MTD_SAFL2A_..._20151129T112140/S2A_USER_MTD_SAFL2A_..._20151129T112140.xml'
        src_path_2 = 'C:/S2/S2A_USER_MTD_SAFL2A_..._20151129T112141/S2A_USER_MTD_SAFL2A_..._20151129T112141.xml'
        trg_path   = 'C:/S2/S2A_USER_MTD_SAFL2A_..._20151129T112140_mos/'
        
        bands      = {'B2': 'B2'}
        para       = {'northBound': 37.4, 'eastBound': 76.8, 'southBound': 36.3, 'westBound': 75.6, \
                      'pixelSizeX': 0.001, 'pixelSizeY': 0.001}
        
        products   = []
        products.append(ProductIO.readProduct(src_path_1))
        products.append(ProductIO.readProduct(src_path_2))
        
        mosaicOp().mosaic(products, trg_path, bands, para)
        
        --------------------------------------------------------------------------------------------------------------------------------
        '''
        func_name = 'MOSAIC'
        func_code = 'Mosaic'
        
        parameters = self.HashMap()
        
        # Set variables.
        print('{}: Set variables'.format(func_name))
        variables = jpy.array('org.esa.snap.core.gpf.common.MosaicOp$Variable', len(band_dict))
        for (i, band_name) in enumerate(band_dict):
            variable_i = self.Variables()
            variable_i.setName(band_name)
            variable_i.setExpression(band_dict[band_name])
            variables[i] = variable_i
            
        parameters.put('variables', variables)
        
        # Set parameters.
        print('{}: Set parameters'.format(func_name))
        BB = 0
        PS = 0
        for para_name in para_dict:
            if para_name in ('pixelSizeX', 'pixelSizeY'):
                PS = PS + 1
            if para_name in ('northBound', 'eastBound', 'southBound', 'westBound'):
                BB = BB + 1
            parameters.put(para_name,para_dict[para_name])
            
        # Set Bounding Box and Pixelsize if none was defined.
        if BB == 4 and PS == 2:
            print('{}: INFO, Bounding Box Coordinates and Pixelsizes defined through User-Input'.format(func_name))
        elif BB == 0:
            print('{}: INFO, No Bounding Box Coordinates defined through User-Input'.format(func_name))
            print('{}: Set Parameter Bounding Box'.format(func_name))
            bboxE, bboxW, bboxS, bboxN, pxSzNS, pxSzEW = ([] for i in range(6))
            
            for data in src_data:
                (b,y_EW,x_NS) = basicOp().BoundingBox(data)
                bboxE.append(b[0])
                bboxW.append(b[1])
                bboxS.append(b[2])
                bboxN.append(b[3])
                pxSzNS.append(x_NS)
                pxSzEW.append(y_EW)
            
            bbox = [min(bboxE),max(bboxW),min(bboxS),max(bboxN)]
            parameters.put('eastBound',bbox[1])
            parameters.put('westBound',bbox[0])
            parameters.put('southBound',bbox[2])
            parameters.put('northBound',bbox[3])
            
            if PS != 2:
                print('{}: Set Parameter Pixelsize'.format(func_name))
                pxSzEW_avg_m, pxSzNS_avg_m = basicOp().deg2m(bbox, pxSzEW, pxSzNS) 
                
                pxSzEW_avg_int_m = int(round(pxSzEW_avg_m / 5.0,0)*5.0)
                pxSzNS_avg_int_m = int(round(pxSzNS_avg_m / 5.0,0)*5.0)
                
                pxSzEW_avg_deg, pxSzNS_avg_deg = basicOp().m2deg(bbox, pxSzEW_avg_int_m, pxSzNS_avg_int_m) 
                print('{}: pixelSizeY: {}m'.format(func_name,pxSzEW_avg_int_m))
                print('{}: pixelSizeX: {}m'.format(func_name,pxSzNS_avg_int_m))
                
                parameters.put('pixelSizeY',pxSzEW_avg_deg)
                parameters.put('pixelSizeX',pxSzNS_avg_deg)                
            
        elif 1 <= BB < 4:
            BB_num = ('One' if BB == 1 else 'Two' if BB == 2 else 'Tree' if BB == 3 else BB.__str__())
            BB_nam = ('Coordinate' if BB == 1 else 'Coordinates')
            print('{}: {} Bounding Box {} defined by Input'.format(func_name,BB_num,BB_nam))
        else:
            print('{}: ERROR, too many Bounding Box input coordinates ({} instead of 4) or missing Pixelsize.'.format(func_name,BB))
            sys.exit(1)
            
        # Create product.
        print('{}: Create product...'.format(func_name))
        trg_data = GPF.createProduct(func_code, parameters, src_data)
        
        # Save product
        # <supported-format>: BEAM-DIMAP, GeoTIFF, NetCDF, ...
        #
        # ------------------------------------------------------------------------------------------------------------------------------
        # ATTENTION, in case of: 
        #                         RuntimeError: java.lang.OutOfMemoryError: Java heap space
        # ------------------------------------------------------------------------------------------------------------------------------
        # SOLUTION 1:
        # (http://forum.step.esa.int/t/snappy-error-productio-writeproduct/1102)
        #
        # 1. CHANGE <snappy>/jpyconfig.py: 
        #                         jvm_maxmem = None    ---->      jvm_maxmem = '6G'    
        #                                                         Increase RAM
        #
        # 2. CHANGE <snappy>/snappy.ini: 
        #                         # java_max_mem: 4G   ---->      java_max_mem: 6G
        #                                                         Remove '#' and increase RAM
        # ------------------------------------------------------------------------------------------------------------------------------
        # SOLUTION 2:
        # If you swapped Latitude/Longitude in POLYGON(...) there is also a out-of-memory-error
        #
        print('{}: Save as {} ...'.format(func_name, trg_file_path))
        ProductIO.writeProduct(trg_data, trg_file_path, trg_file_format)
        
        print('{}: Done.'.format(func_name))